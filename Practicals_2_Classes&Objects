/* There are Cows. A Cow has a name and can moo. When you ask a Cow to moo, it shouts out its name. Design a class for Cow and the
tester code. After testing if cows work correctly, create 2 references andthen point to same object. Verify what happens if you change the state
of the object using one ref when you invoke behaviour using the second.! */

/*Cow class design*/
public class Cow {

	String name;
	public void moo()
	{
		System.out.println("I am cow and I am moo mooingâ€¦"+name);
	}
}

/*Cow tester class*/
public class TestCow
{
	public static void main(String[] args)
	{
		Cow c1 = new Cow();
		c1.name = "Rummy";
		c1.moo();
		Cow c2 = c1;// new Cow();
		System.out.println("name of c2 = "+c2.name);
		c2.name = "Jimmy";
		c1.moo();
		Cow c3 = c2;
		c3.name = "Tommy";
		System.out.println("c1.name = "+c1.name);
		System.out.println("c2.name = "+c2.name);
		System.out.println("c3.name = "+c3.name);
		c1.moo();
		
	}
}

**********************************************************************************************************************************************
/* Check if instance variables of type string, int and boolean are given default values. Check if local variables are given default 
values. ! How to do this? Create a class with 4 instance variables with String,boolean, int and boolean as datatypes. Create a Tester 
class with main where you create an object and using reference print the instance variable values to monitor using SOP */

public class Obj {
  String name;
	int a;
	boolean b;
}

public class TestObj {

	public static void main(String[] args)
	{
	 Obj ob = new Obj();
	 System.out.println(ob.name);
	 System.out.println(ob.a); 
	 System.out.println(ob.b); 
	}
}


*******************************************************************************************************************************************
/* A Pen has inkQty (int), colour (string) and can be used to write and refill. A text must be given for it to write. A quantity must be 
given to refill.If there is ink then the pen will write the text given to it (SOP). Refill works by taking in the int qty to add to the 
existing inkQty. First as a class designer, on paper apply OOAD and arrive at the class design. Then create the class implementation and 
create a tester class to create 2 pen objects, give it inkQty and ask it to write. First code this on yourown. If you cannot get it correctly, 
then see Pen.java and TestPen.java.Then fix the code and rerun. Do not see the code first */


//Pen Class Design//
public class Pen {

	int inkQty;
	String colour;
	
	public void write(String data)
	{
		if(inkQty > 0)
			{
				System.out.println("Pen writing "+ data+" in "+colour+" colour");
				inkQty--;
			}
		else
			{
				System.out.println("Please fill the ink");
			}
	}
	
	public void refill(int qty)
	{
		inkQty = inkQty+qty;
	}
	
}

//Pen tester class//

public class TestPen {

	public static void main(String[] args) {
		Pen p1 = new Pen();
		
		p1.inkQty = 3;
		p1.colour = "black";
		p1.write("Johnny");
		p1.write("Johnny");
		p1.write("Johnny");
		p1.write("Johnny");
		
		System.out.println("inkQty in p1 = "+p1.inkQty);
		p1.refill(2);
		System.out.println("inkQty in p1 = "+p1.inkQty);
		
		p1.write("Johnny");
		p1.write("Johnny");
		p1.write("Johnny");
		
		System.out.println("inkQty in p1 = "+p1.inkQty);
		p1.refill(0);
		p1.refill(-1);
		System.out.println("inkQty in p1 = "+p1.inkQty);
		
		p1.write("Johnny");
	}

}

***********************************************************************************************************************************************
/* There are Persons. A person has a age, name. Persons can eat ,sleep. A person sleeps more if his age is < 40 and eats less. If the
persons age is >= 40, he sleeps less but eats more. Design a Person class and test it */

//Person class design//

public class Person {

	int age;
	String name;
	
	public void eat(int data)
	{
		if(data < 40)
			{
				System.out.println("Person "+name+" sleeps more");
			}
		else
			{
				System.out.println("Person "+name+" sleeps less");
			}
	}
	
	public void sleep(int data)
	{
		if(data < 40)
		{
			System.out.println("Person "+name+" eats less");
		}
	else
		{
			System.out.println("Person "+name+" eats more");
		}
	}
	
}

//Person tester class//
public class TestPerson {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Person p1 = new Person();
		
		p1.name = "ramu";
		p1.eat(40);
		p1.sleep(40);
		
		Person p2 = new Person();
		p1.name = "somu";
		p1.eat(20);
		p1.sleep(20);
	}

}

***********************************************************************************************************************************************
/*There are Dogs. Every Dog has a name and a size. Dogs can bark. If the size of the dog is > 10, it "meows". If the size <=10, then as
many times, it "bow wow" its name to the monitor. Test Dog design. After testing the same, make the size variable private and then add 
setSize()/getSize() method. See how this impacts your tester class */

//Dog class design//
public class Dog {

	String name;
	private int size;
	
	//setter
	public void setSize(int val)
	{
		if(val > 0)
			size = val;
		else
			System.out.println("Please input proper values");
			
	}
	
	//getter
	public int getSize()
	{
		return size;
	}
	
	public void bark(int data)
	{
		if(data > 10)
			{
			System.out.println("Dog with  "+name+" meows");
			}
		else
			{
			for(int i = 0; i < data;i++)
			{
			System.out.println("Dog with  "+name+" bow wow");
			}
	}
	
  }
}

//Dog tester class//
public class testClass {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		test d1 = new test();
		
		d1.name = "ruby";
		d1.setSize(-1);
		d1.setSize(3);
		d1.setSize(0);
		d1.bark(3);
		d1.bark(20);
		d1.bark(0);
		}
}
***************************************************************************************************************************************************
/* Cars can be started, driven, reversed or stopped. You have to start the car to drive/reverse/stop it. When car is being driven / reversed,
the fuel reduces. Once the car has no fuel, the car stops. Every car has a name. Write a tester class to test cars */










