/* WAM to add an arrays of ints and return the sum value. Test for boundary cases. */

package com.uttara.test;
public class test {
    public static int sum(int[] arr) {
		int sum = 0;
		
    for (int i=0; i < arr.length; i++){
			sum = sum+arr[i];	
		}
		return sum;
	}	
	public static void main(String[] args){
		 int[] a = {1,2,3,4,5};
		 System.out.println("The sum of the array is " + sum(a));
	}
}
*****************************************************************************************************************************************
/* WAM to accept an array of ints as parameter. The method should return the max value from it. Add another method which returns the min 
from the elements */

package com.uttara.test;
public class test {

	public static int Max(int[] arr) {
		int max = arr[0];
		
		for(int i=1; i<arr.length; i++){
			if(max < arr[i])
			max = arr[i];
		}
		return max;
	}	
	
	public static int Min(int[] arr) {
		int min = arr[0];
		
		for(int i=1; i<arr.length; i++){
			if(min > arr[i])
			min = arr[i];
		}
		return min;
	}	

	public static void main(String[] args)
	{
		int[] a = {1,2,3,4,5};
		
		System.out.println("Maximum value in the array is "+ Max(a));
		System.out.println("Minimum value in the array is "+ Min(a));
	}
}
******************************************************************************************************************************************
/* WAM to pass 2 arrays of ints to a method. The method should return the max value present across both the array elements */

package com.uttara.test;
public class test {

	public static int MaxArrayTwo(int [] array1, int [] array2) {
		int len1 = array1.length;
		int len2 = array2.length;
		
		int max1 = 0;
		int max2 = 0;
		
		for (int i = 0; i<len1;i++){
			if(max1 < array1[i])
			max1 = array1[i];
		}
		
		for (int i = 0; i<len2;i++){
			if(max2 < array2[i])
			max2 = array2[i];
		}
		
		return((max1 > max2) ? max1 : max2);
	}	

	public static void main(String[] args)
	{
		int[] a = {1,2,3,4,5,22};
		int[] b = {5,6,7,8,9,10,11};
		
		System.out.println("Max value present across both the array elements "+ MaxArrayTwo(a,b));	
	}	
}
*******************************************************************************************************************************************
/* WAM to pass 2 arrays of ints to a method. The method should return the average of the values across the 2 arrays. The avg returned 
should be exact and not an approximation */

package com.uttara.test;
public class test {
	public static float AvgArrayTwo(int [] array1 , int [] array2)
	{	
		int len1 = array1.length;
		int len2 = array2.length;
		int sum1 = 0;
    		int sum2 = 0;
		float avg,avg1,avg2;
	
		for(int i =0; i < len1; i++)
			sum1 = sum1 + array1[i];
		
		for(int i =0; i < len2; i++)
			sum2 = sum2 + array2[i];
		
		avg1 = sum1/len1;
		avg2 = sum2/len2;
		avg = (avg1+avg2)/2;

		return avg;
	}

public static void main(String[] args)
	{
		int[] a = {1,2,3,4,5};
		int[] b = {5,6,7,8,9,10,11};
		
		System.out.println("Average of the values across the 2 arrays "+ AvgArrayTwo(a,b));
	}	
}
*********************************************************************************************************************************************
/*WAM to accept an int input. The method should return whether the num passed is a square (like i/p-> 100, 9, 16, etc -> o/p should be 
true) or not */

public class test {

    public static boolean SquareNumber(int num)
       {	
       int i = 0;
       if (num < 0)
       {
    	   System.out.println("Input positive number");
    	   return false;
       }
		
       while(i < num)
       {
    	   if(i * i == num) 
   		      {
    		      System.out.println("Number is a Square number:" + num);
    		      return true;
   		       }
   		     else
   		       {
   			       i++;
   			       continue;
   		       }
         }
		  return false;
	 }

	public static void main(String[] args)
	{
		System.out.println("SquareNumber "+ SquareNumber(100));
	}
}
*************************************************************************************************************************************************
/*WAM to accept an int input. Find the sum of the digits in the number and return it*/

public class test {

	public static int SumOfDigits(int num)
	{
		int sum = 0;
		while(num != 0)
		{
			sum = sum + (num % 10);
			num = num/10;
		}
		return sum;
	}
	public static void main(String[] args)
	{
		System.out.println("Sum of Digits in the number "+ SumOfDigits(100));
	}
}
****************************************************************************************************************************************************
/* WAM to accept an int as input and return whether the number is a palindrome or not */

public class test {
		public static boolean Palindrome(int num)
		{
			int rem, sum;
			int revnum = 0;
			int orinum = num;
			
			while(num != 0)
			{
				rem = num % 10;
				revnum = revnum * 10 + rem;
				num = num/10;
			}
			
			if (orinum == revnum)
			{
				System.out.println(orinum + " is a palindrome.");
			    return true;
		    }
			else
			{
				System.out.println(orinum + " is not a palindrome.");
			    return false;
			}
				
		}
		public static void main(String[] args)
		{
			System.out.println("Palindrome or not "+ Palindrome(101));
		}
	}
*********************************************************************************************************************************************************
/* WAM to accept an int array and an int and do a search of the second parameter in the first and return true/false. How many different
ways can we do a search? */

public class test {
		public static boolean IntSearch(int [] array1, int num)
		{
			int i = 0;
			
			while(i < array1.length)
			{
				if (num == array1[i])
				{
					System.out.println("Number found in the array "+ num);
					return true;
				}
				else
				{
					i++;
					continue;
				}
			}
			return false;
				
		}
		public static void main(String[] args)
		{
			int [] a = {1,2,3,4,5};
			int x = 45;
			System.out.println("number found or not "+ IntSearch(a,x));
		}
	}
************************************************************************************************************************************************************
/* WAM to accept an int array and return a sorted array. How many different ways do you know to sort? */

public class test {
		public static int [] SortedArray(int [] array1)
		{
			int i ,j,temp;
			
			for (i = 0; i < array1.length; i++){
				for (j = i+1; j< array1.length; j++){
					if(array1[i] > array1[j])
					{
						temp = array1[i];
						array1[i] = array1[j];
						array1[j] = temp;
					}
				}
			}
			
			return array1;
		}
		public static void main(String[] args)
		{
			int [] a = {5,3,7,1,8,9};
			int [] sortedarray = SortedArray(a);
			System.out.println("Sorted array is: ");
			for (int i = 0; i < sortedarray.length; i++)
			{
				System.out.println(sortedarray[i]);
			}
		}
	}
****************************************************************************************************************************************************************
/* WAM to accept an int array. Return an array which contains only unique elements */
	
  public static void UniqueElement(int [] arr, int n)
		{ 
		        for (int i = 0; i < n; i++) 
		        {  
		            for (int j = 0; j < i; j++) 
		            if (arr[i] == arr[j]) 
		                break; 
		      
		             if (i == j) 
		             System.out.print( arr[i] + " "); 
		        } 
		  }
		
		public static void main(String[] args)
		{
			int [] a = {5,5,5,5,5,5};
			int x = a.length;
			UniqueElement(a,x);	
		}
	}
