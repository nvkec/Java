/*Print out whether one string is a rotation of the other*/

public class test {

	public static void main(String[] args)
	{
		String s1 = args[0];
		String s2 = "";
		char c;
		
		for(int i = (s1.length() -1);  i >= 0;  i--)
		{
			c = s1.charAt(i);
			s2 = s2 + c;
		}
		
		if(s1.equals(s2))
		{
			System.out.println(s1 + " is a palindrome");
		}
		else
		{
			System.out.println(s1 + " is not a palindrome");
		}
		
	}
}
*****************************************************************************************************************************************
/* Take string inputs from arg[0]. Sort the characters in the string and print them out */
public class test {
	public static void swapChars(int i, int j, char[] ch) {
        	char temp = ch[i];
        	ch[i] = ch[j];
        	ch[j] = temp;
    	}
	
	public static void main(String[] args)
	{
		
		String s1 = args[0];
		char [] ch = s1.toCharArray();
		String s2 = "";
		
		for(int i = 0; i < s1.length(); i++){
			for(int j = i+1; j < s1.length(); j++){
				if(ch[j] < ch[i])
					swapChars(i, j, ch);
			}
		}
		
		for(int i = 0; i < s1.length(); i++)
			s2 = s2 + ch[i];
		
		System.out.println("Sorted string " + s2);
	}
	
	
}
*****************************************************************************************************************************************
/* Take any number of string inputs from the command line. Sort the strings alphabetically and print them out */

public class test {

	public static void main(String[] args)
	{
		int len = args.length;
		String [] str = new String[len];
		for(int x =0; x < len; x++)
		{
			str[x] = args[x];
		}
		
		for(int i = 0; i < len; i++)
		{
			for(int j = i+1; j < len; j++)
			{
				if((str[i].compareTo(str[j])) > 0)
				{
					String temp = str[i];
					str[i] = str[j];
					str[j]= temp;
				}
			}
			
		}
		
		System.out.println("Strings sorted in alphabetical order");
		for(int i = 0; i < len; i++){
			System.out.println(str[i]);
		}
	}
	
}
***************************************************************************************************************************************
/* Take string input from arg[0]. Print all unique chars from this string to the console */

public class test {

	public static void main(String[] args)
	{
		String s1=args[0];
		String s2="";
		int count = 0;
		
		for(int i =0; i < s1.length(); i++)
		{
			if(s2.indexOf(s1.charAt(i)) == -1)
				s2 = s2 + s1.charAt(i);
		}
		
		System.out.println(s2 + " ");
	}
	
}
***************************************************************************************************************************************

/* Take string input from arg[0]. Print the number of occurrences of every character in an input string */

public class test {

	public static void main(String[] args)
	{
		String s1 = args[0];
		char[] c = s1.toCharArray();
		int length = s1.length();
		int counter = 0;
		
		for(int i = 0; i < length; i++)
		{
			counter = 0;
			for(int j = 0; j < length; j++)
			{
				if(j < i && c[i] == c[j])
				{
					break;
				}
				
				if(c[j] == c[i])
				{
					counter++;
				}
				
				if(j == (length-1))
				{
					System.out.println("The Character "+c[i]+ " is present "+counter+" times");
				}
			}
		}
	}
***************************************************************************************************************************************
/*   Given a long sequence of limited symbols, Compress the string as shown in the example
     i/p : xxxxxxxgggggggggmmckkkll
     o/p : x7g9m2c1k3l2 (symbol followed by number of occurrences)
*/    

In the above code replace 

				if(j == (length-1))
				{
					System.out.println("The Character "+c[i]+ " is present "+counter+" times");
				}
with

				if(j == (length-1))
				{
					System.out.print(c[i]);
					System.out.print(counter);
				}
then we will get o/p in the x7g9m2c1k3l2 (symbol followed by number of occurrences)

****************************************************************************************************************************************
/*   Find out if one string is a permutation of the other
     i/p : "staple" "plates" o/p: yes
     i/p : "economics" "economios" o/p: no
*/
