/* Test basic methods of Scanner class usage to read inputs from the keyboard (Ex code in
TestScanner.java)*/
        Steps:
        Create 2 Scanner objects wrapping System.in like this (import java.util.* as well):
        Scanner sc1 = new Scanner(System.in);
        Scanner sc2 = new Scanner(System.in);
        System.out.println("Enter a string input");
        String s1 = sc1.next(); // to read a single word input
        //print s1
        System.out.println("Enter int as input");
        int n = sc1.nextInt();
        System.out.println("n = "+n);
        double d = sc1.nextDouble();
        //print d
        String line = sc2.nextLine(); // sentence input
        //print line
        Check out other methods usage of Scanner class to read a boolean, float, long and print the
        contents to the monitor. Remember to use sc2.nextLine() on a separate scanner.

=============================================================================================================================================
/*Test basic methods of File class usage (Ex code in TestFile.java)*/

      import java.io.File;

      public class TestFile {

        public static void main(String[] args) {

          if(args.length>0)
          {
                System.out.println("args[0] = "+args[0]);
                File f1 = new File(args[0]);
                System.out.println("does f1 exist ? "+f1.exists());
                System.out.println("is directory ? "+f1.isDirectory());
                System.out.println("is file ? "+f1.isFile());
                System.out.println("abs path = "+f1.getAbsolutePath());
                System.out.println("size = "+ f1.length());
                System.out.println("is hidden ? "+f1.isHidden());
                System.out.println("----------------");
                if(f1.exists() && f1.isDirectory())
                {
                  System.out.println("listing contents of "+f1.getName());
                  File[] fa = f1.listFiles();
                  for(File f : fa)
                  {
                    System.out.println(f.getAbsolutePath());
                  }
                }
          }
          else
                System.out.println("pls give at least one path as input");
          }
       }  
       
       
===========================================================================================================================================================================================================================================================================
/*Write a program to read input path of a text file from the user and print its contents to the monitor.Code it directly in main() for now.*/

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;

public class IOQuestion3 {

	public static void main(String[] args) {
		Scanner sc1=new Scanner(System.in);
		System.out.println("enter the input of the file");
		String path=sc1.next();
		BufferedReader br=null;
		String line;
		try
		{
			br=new BufferedReader(new FileReader(path));
			while((line=br.readLine())!=null)
			{
				System.out.println(line);//reading the contents of the file
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			if(br!=null)
				try {
					br.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		}

	}

}
=================================================================================================================================================
/*Take 2 paths as input from user (first to an existing text file and second to one that does not exist). From one, read the file content
 and write it to another. (Ex code in TestIO.java, TestReading.java and ReadFileAndPrint.java)!

import java.io.BufferedReader;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

public class IOQuestion4 {

	public static void main(String[] args) {

		Scanner sc1 = new Scanner(System.in);
		Scanner sc2 = new Scanner(System.in);
		System.out.println("Enter the input file path");
		String inPath = sc1.next();

		System.out.println("Enter the output file path");
		String outPath = sc2.next();

		FileReader fr = null;
		FileWriter fw = null;
		int c;

		try {
			fr = new FileReader(inPath);
			fw = new FileWriter(outPath);
			while ((c = fr.read()) != -1) {
				fw.write(c);
			}
		}

		catch (Exception e) {
			e.printStackTrace();
		}

		finally {

			try {
				if (fr != null)
					fr.close();
				if (fw != null)
					fw.close();
			}

			catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
}

=============================================================================================================================================
/* WAP to take input a path from the user. If the path is pointing to a folder, print all the file names which are .txt files */


import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

public class IOQuestion5 {

	public static void main(String[] args) {

		String path = args[0];

		File f = new File(path);

		if (f.exists() && f.isDirectory()) {

			File[] fa = f.listFiles();
			for (File fi : fa) {
				if (fi.exists() && fi.getName().contains(".txt")) {
					BufferedReader br = null;
					try {
						br = new BufferedReader(new FileReader(fi));
						String line;
						while ((line = br.readLine()) != null) {
							System.out.println(line);
						}
					} catch (IOException e) {
						e.printStackTrace();
					} finally {
						try {
							if (br != null)
								br.close();
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
				}
			}
		} else {
			System.out.println("pls give at least one path as input");

		}

	}
}
=========================================================================================================================================
/* WAP to take the input from the user a path and a word. If the path is a text file, search the word in the file and print the number 
of occurrences. If the path is a folder, read the files in the folder and print the number of occurrences in all the text files of the 
word (important) */

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;

public class IOQuestion10 {

	public static void main(String[] args) {

		Scanner sc1 = new Scanner(System.in);
		System.out.println("Enter the path of input file");
		String path = sc1.next();
		Scanner sc2 = new Scanner(System.in);
		System.out.println("Enter the word");
		String word = sc2.next();

		BufferedReader br = null;
		String line;
		int count = 0;

		File f = new File(path);

		if (f.exists() && f.isFile() && f.getName().contains(".txt")) {

			try {
				br = new BufferedReader(new FileReader(f));
				while ((line = br.readLine()) != null) {
					String[] x = line.split(" ");
					for (String v : x) {
						if (v.equals(word))
							count++;
					}
				}
				System.out.println("the count of the words are" + ".............> " + count);

			} catch (IOException e) {

				e.printStackTrace();
			}

		}

		else if (f.exists() && f.isDirectory()) {

			try {
				File[] fa = f.listFiles();

				for (File x : fa) {
					if (x.getName().contains(".txt")) {
						br = new BufferedReader(new FileReader(x));
						while ((line = br.readLine()) != null) {
							String[] str = line.split(" ");
							for (String v : str) {
								if (v.equals(word))
									count++;
							}
						}

					}

				}

			} catch (IOException e) {

				e.printStackTrace();
			}

		}
		System.out.println("the count of the words are" + ".............> " + count);
	}
}
=========================================================================================================================================
/*Take 2 file paths from the user and identify which words are not present in both the files*/

import java.io.*;
import java.util.*;

public class CollectionExample {

	public static void main(String[] args) {

		Scanner sc1 = new Scanner(System.in);
		Scanner sc2 = new Scanner(System.in);
		System.out.println("Enter the path of first file");
		String path1 = sc1.next();
		System.out.println("Enter the path of first file");
		String path2 = sc2.next();

		Set<String> s1 = new TreeSet<String>();
		Set<String> s2 = new TreeSet<String>();
		Set<String> s3 = new TreeSet<String>();
		Set<String> s4 = new TreeSet<String>();
		BufferedReader br1 = null;
		BufferedReader br2 = null;

		try {
			br1 = new BufferedReader(new FileReader(path1));
			String line;
			while ((line = br1.readLine()) != null) {
				String[] x = line.split(" ");
				for (String s : x) {
					s1.add(s);
				}
			}

			br2 = new BufferedReader(new FileReader(path2));
			String line2;
			while ((line2 = br2.readLine()) != null) {
				String[] x = line2.split(" ");
				for (String s : x) {
					s2.add(s);
				}
			}

			System.out.println(s1);
			System.out.println(s2);

			for (String s : s1) {
				if (s2.contains(s)) {
					s3.add(s);
				} else {
					s4.add(s);
				}
			}

			s2.removeAll(s3);
			s2.addAll(s4);
			System.out.println("Unique words are" + ".................>" + s2);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (br1 != null) {
					br1.close();
				}
				if (br2 != null) {
					br2.close();
				}

			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
	}

}

=========================================================================================================================================
/* Print out which word is occurring the max number of times in a file.

Pseudocode:
a)Take a file path as input. validate if it exists and if it is a text file.
b)Create a List<String> words = new ArrayList<String>();
c)Using BufferedReader, read one line at a time, split it by space and add all the words from String[] to the words list.
d)After all lines content has been added to the words list, loop over 
each word and find its number of occurrence using Collections.frequency().
e)Print the one which has max num of occ.
*/












