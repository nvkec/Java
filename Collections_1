/* WAP to compare 2 strings by == and .equals() and test whether Strings .equals() works correctly. Which equals() implementation is getting
picked up?*/

import java.util.*;

public class CollectionExample {

	public static void main(String[] args) {
		String s1 = "abc";
		String s2 = "abc";

		System.out.println("String equality check :- s1==s2 " + (s1 == s2));
		System.out.println("String identity check :- s1.equals(s2) " + (s1.equals(s2))); //String equals implementation is getting picked

		String s3 = new String("chulbul");
		String s4 = new String("chulbul");

		System.out.println("String equality check :- s3==s4 " + (s3 == s4));
		System.out.println("String identity check :- s3.equals(s4) " + (s3.equals(s4))); //String equals implementation is getting picked

	}
}


========================================================================================================================================
/* Code a Person class. Create 2 instance variables, one String name and one int height. Create a parameterized constructor. Create a tester class,
create 2 person objects and compare the two using object identity check and object equality checks:
Person p1 = new Person("Ramu",20);
Person p2 = new Person("Ramu",20);
System.out.println("identity check = "+(p1==p2));
System.out.println("equality = "+(p1.equals(p2)));
Check what is printed and why? Now in Person class, override equals() as discussed. Check the test class execution and observe the output.
Now in main(), print the reference of p1 and see what is shown to the monitor as output. Then override toString() in Person. Re-execute the
main() and see if the printing of reference has changed.
How to override equals()?
public boolean equals(Object o)
{
// do instanceof check for checking if o is a Person, else return false Create new Person reference and point to o by down casting
// Compare the state of this person object with passed person object. If the state is given by primitives, use ==, if it is reference,
//use .equals().
}
Have you understood why and how we should override equals()? How to override toString()
public String toString()
{
return “Person:”+name+”,”+age;
} */


public class Person {

	private String name;
	private int age;

	public Person() {

	}

	public Person(String name, int age) {
		this.name = name;
		this.age = age;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}

	public boolean equals(Object obj) {

		if (obj instanceof Person) {
			Person p = (Person) obj;
			if (this.name.equals(p.name) && this.age == p.age)
				return true;
			else
				return false;
		} else
			return false;
	}

	public static void main(String[] args) {

		Person p1 = new Person("Ramu", 20);
		Person p2 = new Person("Ramu", 20);
		System.out.println("identity check = " + (p1 == p2));
		System.out.println("equality = " + (p1.equals(p2)));

	}
}


========================================================================================================================================
/* Create a TestCollections class with main(). Create an ArrayList object like this:

Collection col = new ArrayList(); //import package java.util.*;

now invoke basic methods on col collection to test adding, searching, removing, getting the size, iteration and printing the contents. First add 5-6
strings in ArrayList. Check if add is successful. Add duplicates. SOP the collection ref. Check whether duplicates are allowed. Create a new String
object with same state as another and check if contains works on collection. Add many duplicates and try to remove all occurrences.

Methods to be used and tested are:
Collection
- add(Object o)
- contains(Object o)
- size()
- remove(Object o)
- clear()
- isEmpty()
- addAll(Collection c)
- removeAll(Collection c)
- retainAll(Collection c)
//to iterate and print contents
for(Object o : col)
{
System.out.println(o);
}
System.out.println(col); //directly print contents without iterating! */

import java.util.*;

public class CollectionExample {

	public static void main(String[] args) {

		Collection<String> col = new ArrayList<String>();

		String s1 = "rama";
		String s2 = "soma";
		String s3 = "bheema";
		String s4 = "xyz";
		String s5 = "abc";

		col.add(s1);
		col.add(s2);
		col.add(s3);
		col.add(s4);
		col.add(s5);
		col.add("abc");
		col.add("abc");

		System.out.println("Collections :- " + col);

		// to iterate and print contents
		for (Object o : col) {
			System.out.println(o);
		}

		System.out.println("is s5 " + s5 + " present in " + col + " ? " + col.contains(s5));
		System.out.println("After removing s5 :- " + col.remove(s5));
		System.out.println("size = " + col.size());
		System.out.println("Collections :- " + col);

	}
}
